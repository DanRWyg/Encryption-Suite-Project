/**
 * class implementation for the AES 128, 192, and 256 block cipher.
 * @file AES.cpp
 * @author Daniel Wygant
 * @version 1.0 10/20/2020
 */

#include "AES.hpp"

/**
 * AES primary constructor
 *
 * @param key bytearray of size 16, 24, or 32 depending on the chosen keySize
 * @param keySize enum with three possible values: AES128 = 16, AES192 = 24, or AES256 = 32
 */
AES::AES(const uint8_t key[], KEY_SIZE keySize) : BlockCipher(16), keySize(keySize) {
    for (int i = 0; i < keySize; i++)
        this->key[i] = key[i];

    generateExpandedKey();
}

/**
 * AES copy constructor
 *
 * @param that reference to a preexisting AES object that should be copied
 */
AES::AES(const AES &that) : AES(that.key, that.keySize) {
    
}

/**
 * AES Block Cipher destructor
 */
AES::~AES() {
    
}

/**
 * encrypts a block of plaintext and returns the resulting ciphertext
 *
 * algorithm is described at: https://en.wikipedia.org/wiki/Advanced_Encryption_Standard
 *
 * @param plaintext a 16 byte array of data for encrypting
 * @param ciphertext a 16 byte array for returning the resulting encrypted ciphertext
 */
void AES::encryptBlock(const uint8_t plaintext[], uint8_t ciphertext[]) const {

    uint8_t block[4][4];

    // arrange the 16 byte plaintext into a column-major order 4x4 block
    for (int c = 0; c < 4; c++)
        for (int r = 0; r < 4; r++)
            block[r][c] = plaintext[(c * 4) + r];

    // the different variations of AES require a different number of rounds
    int nRounds;
    switch (keySize) {
        case AES128: nRounds = 10; break;
        case AES192: nRounds = 12; break;
        case AES256: nRounds = 14; break;
    }

    // round 0
    addRoundKey(block, 0);

    // rounds [1-9] / [1-11] / [1-13]
    for (int round = 1; round < nRounds; round++) {
        sboxSub(block);
        shiftRows(block);
        mixColumns(block);
        addRoundKey(block, round);
    }

    // round 10 / 12 / 14
    sboxSub(block);
    shiftRows(block);
    addRoundKey(block, nRounds);

    // rearrange the column-major order 4x4 block into the 16 byte ciphertext
    for (int c = 0; c < 4; c++)
        for (int r = 0; r < 4; r++)
            ciphertext[(c * 4) + r] = block[r][c];
}

/**
 * decrypts a block of ciphertext and returns the resulting plaintext
 *
 * algorithm is merely the inverse of the operations conducted during encryption
 *
 * @param ciphertext a 16 byte array of data for decrypting
 * @param plaintext a 16 byte array for returning the resulting decrypted plaintext
 */
void AES::decryptBlock(const uint8_t ciphertext[], uint8_t plaintext[]) const {

    uint8_t block[4][4];

    // arrange the 16 byte ciphertext into a column-major order 4x4 block
    for (int c = 0; c < 4; c++)
        for (int r = 0; r < 4; r++)
            block[r][c] = ciphertext[(c * 4) + r];

    // the different variations of AES require a different number of rounds
    int nRounds;
    switch (keySize) {
        case AES128: nRounds = 10; break;
        case AES192: nRounds = 12; break;
        case AES256: nRounds = 14; break;
    }

    // round 10 / 12 / 14
    addRoundKey(block, nRounds);
    shiftRowsInv(block);
    sboxSubInv(block);

    // rounds [9-1] / [11-1] / [13-1]
    for (int round = nRounds - 1; round > 0; round--) {
        addRoundKey(block, round);
        mixColumnsInv(block);
        shiftRowsInv(block);
        sboxSubInv(block);
    }

    // round 0
    addRoundKey(block, 0);

    // rearrange the column-major order 4x4 block into the 16 byte plaintext
    for (int c = 0; c < 4; c++)
        for (int r = 0; r < 4; r++)
            plaintext[(c * 4) + r] = block[r][c];
}

/**
 * values found at: https://en.wikipedia.org/wiki/AES_key_schedule
 * NOTE: RCON_TABLE[0] is a placeholder and not valid
 */
const uint8_t AES::RCON_TABLE[] = {
    0xff, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36
};

/**
 * values found at: https://www.samiam.org/logtables.txt
 * NOTE: EXP_TABLE[i] = 0x03 ^ i using Galois Field multiplication
 */
const uint8_t AES::EXP_TABLE[] = {
    0x01, 0x03, 0x05, 0x0f, 0x11, 0x33, 0x55, 0xff, 0x1a, 0x2e, 0x72, 0x96, 0xa1, 0xf8, 0x13, 0x35, 
    0x5f, 0xe1, 0x38, 0x48, 0xd8, 0x73, 0x95, 0xa4, 0xf7, 0x02, 0x06, 0x0a, 0x1e, 0x22, 0x66, 0xaa, 
    0xe5, 0x34, 0x5c, 0xe4, 0x37, 0x59, 0xeb, 0x26, 0x6a, 0xbe, 0xd9, 0x70, 0x90, 0xab, 0xe6, 0x31, 
    0x53, 0xf5, 0x04, 0x0c, 0x14, 0x3c, 0x44, 0xcc, 0x4f, 0xd1, 0x68, 0xb8, 0xd3, 0x6e, 0xb2, 0xcd, 
    0x4c, 0xd4, 0x67, 0xa9, 0xe0, 0x3b, 0x4d, 0xd7, 0x62, 0xa6, 0xf1, 0x08, 0x18, 0x28, 0x78, 0x88, 
    0x83, 0x9e, 0xb9, 0xd0, 0x6b, 0xbd, 0xdc, 0x7f, 0x81, 0x98, 0xb3, 0xce, 0x49, 0xdb, 0x76, 0x9a, 
    0xb5, 0xc4, 0x57, 0xf9, 0x10, 0x30, 0x50, 0xf0, 0x0b, 0x1d, 0x27, 0x69, 0xbb, 0xd6, 0x61, 0xa3, 
    0xfe, 0x19, 0x2b, 0x7d, 0x87, 0x92, 0xad, 0xec, 0x2f, 0x71, 0x93, 0xae, 0xe9, 0x20, 0x60, 0xa0, 
    0xfb, 0x16, 0x3a, 0x4e, 0xd2, 0x6d, 0xb7, 0xc2, 0x5d, 0xe7, 0x32, 0x56, 0xfa, 0x15, 0x3f, 0x41, 
    0xc3, 0x5e, 0xe2, 0x3d, 0x47, 0xc9, 0x40, 0xc0, 0x5b, 0xed, 0x2c, 0x74, 0x9c, 0xbf, 0xda, 0x75, 
    0x9f, 0xba, 0xd5, 0x64, 0xac, 0xef, 0x2a, 0x7e, 0x82, 0x9d, 0xbc, 0xdf, 0x7a, 0x8e, 0x89, 0x80, 
    0x9b, 0xb6, 0xc1, 0x58, 0xe8, 0x23, 0x65, 0xaf, 0xea, 0x25, 0x6f, 0xb1, 0xc8, 0x43, 0xc5, 0x54, 
    0xfc, 0x1f, 0x21, 0x63, 0xa5, 0xf4, 0x07, 0x09, 0x1b, 0x2d, 0x77, 0x99, 0xb0, 0xcb, 0x46, 0xca, 
    0x45, 0xcf, 0x4a, 0xde, 0x79, 0x8b, 0x86, 0x91, 0xa8, 0xe3, 0x3e, 0x42, 0xc6, 0x51, 0xf3, 0x0e, 
    0x12, 0x36, 0x5a, 0xee, 0x29, 0x7b, 0x8d, 0x8c, 0x8f, 0x8a, 0x85, 0x94, 0xa7, 0xf2, 0x0d, 0x17, 
    0x39, 0x4b, 0xdd, 0x7c, 0x84, 0x97, 0xa2, 0xfd, 0x1c, 0x24, 0x6c, 0xb4, 0xc7, 0x52, 0xf6, 0x01
};

/**
 * values found at: https://www.samiam.org/logtables.txt
 * NOTE: LOG_TABLE[i] = log(i) (base 0x03) using Galois Field operations
 */
const uint8_t AES::LOG_TABLE[] = {
    0x00, 0xff, 0x19, 0x01, 0x32, 0x02, 0x1a, 0xc6, 0x4b, 0xc7, 0x1b, 0x68, 0x33, 0xee, 0xdf, 0x03, 
    0x64, 0x04, 0xe0, 0x0e, 0x34, 0x8d, 0x81, 0xef, 0x4c, 0x71, 0x08, 0xc8, 0xf8, 0x69, 0x1c, 0xc1, 
    0x7d, 0xc2, 0x1d, 0xb5, 0xf9, 0xb9, 0x27, 0x6a, 0x4d, 0xe4, 0xa6, 0x72, 0x9a, 0xc9, 0x09, 0x78, 
    0x65, 0x2f, 0x8a, 0x05, 0x21, 0x0f, 0xe1, 0x24, 0x12, 0xf0, 0x82, 0x45, 0x35, 0x93, 0xda, 0x8e, 
    0x96, 0x8f, 0xdb, 0xbd, 0x36, 0xd0, 0xce, 0x94, 0x13, 0x5c, 0xd2, 0xf1, 0x40, 0x46, 0x83, 0x38, 
    0x66, 0xdd, 0xfd, 0x30, 0xbf, 0x06, 0x8b, 0x62, 0xb3, 0x25, 0xe2, 0x98, 0x22, 0x88, 0x91, 0x10, 
    0x7e, 0x6e, 0x48, 0xc3, 0xa3, 0xb6, 0x1e, 0x42, 0x3a, 0x6b, 0x28, 0x54, 0xfa, 0x85, 0x3d, 0xba, 
    0x2b, 0x79, 0x0a, 0x15, 0x9b, 0x9f, 0x5e, 0xca, 0x4e, 0xd4, 0xac, 0xe5, 0xf3, 0x73, 0xa7, 0x57, 
    0xaf, 0x58, 0xa8, 0x50, 0xf4, 0xea, 0xd6, 0x74, 0x4f, 0xae, 0xe9, 0xd5, 0xe7, 0xe6, 0xad, 0xe8, 
    0x2c, 0xd7, 0x75, 0x7a, 0xeb, 0x16, 0x0b, 0xf5, 0x59, 0xcb, 0x5f, 0xb0, 0x9c, 0xa9, 0x51, 0xa0, 
    0x7f, 0x0c, 0xf6, 0x6f, 0x17, 0xc4, 0x49, 0xec, 0xd8, 0x43, 0x1f, 0x2d, 0xa4, 0x76, 0x7b, 0xb7, 
    0xcc, 0xbb, 0x3e, 0x5a, 0xfb, 0x60, 0xb1, 0x86, 0x3b, 0x52, 0xa1, 0x6c, 0xaa, 0x55, 0x29, 0x9d, 
    0x97, 0xb2, 0x87, 0x90, 0x61, 0xbe, 0xdc, 0xfc, 0xbc, 0x95, 0xcf, 0xcd, 0x37, 0x3f, 0x5b, 0xd1, 
    0x53, 0x39, 0x84, 0x3c, 0x41, 0xa2, 0x6d, 0x47, 0x14, 0x2a, 0x9e, 0x5d, 0x56, 0xf2, 0xd3, 0xab, 
    0x44, 0x11, 0x92, 0xd9, 0x23, 0x20, 0x2e, 0x89, 0xb4, 0x7c, 0xb8, 0x26, 0x77, 0x99, 0xe3, 0xa5, 
    0x67, 0x4a, 0xed, 0xde, 0xc5, 0x31, 0xfe, 0x18, 0x0d, 0x63, 0x8c, 0x80, 0xc0, 0xf7, 0x70, 0x07
};

/**
 * values found at: https://www.samiam.org/s-box.html
 */
const uint8_t AES::SBOX_TABLE[] = {
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

/**
 * values found at: https://www.samiam.org/s-box.html
 */
const uint8_t AES::SBOX_INV_TABLE[] = {
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};

/**
 * uses the user-provided key [AES::key] to generate an expanded key [AES::ekey]
 * for [AES::key] sizes of 16, 24, and 32 bytes the resulting [AES::ekey] 176, 208, and 240 bytes respectively
 * 
 * algorithm is described at: https://www.samiam.org/key-schedule.html
 */
void AES::generateExpandedKey() {
    // determine the requisite size of the expanded key
    uint8_t *limit = ekey;
    switch (keySize) {
        case AES128: limit += 176; break;
        case AES192: limit += 208; break;
        case AES256: limit += 240; break;
    }

    uint8_t *curr = ekey;

    // the first [keySize] bytes of the expanded key is the original user provided key
    for (int i = 0; i < keySize; i++, curr++)
        curr[0] = key[i];

    int round = 1;
    while (curr != limit) {
        // STEP 1.

        // first 4 bytes of a section is the last 4 bytes of the previous section
        for (int i = 0; i < 4; i++)
            curr[i] = curr[i - 4];

        // perform left circular rotation
        uint8_t temp = curr[0];
        for (int i = 0; i < 3; i++)
            curr[i] = curr[i + 1];
        curr[3] = temp;

        // perform SBOX substitution
        for (int i = 0; i < 4; i++)
            curr[i] = SBOX_TABLE[curr[i]];
        
        // XOR the first byte with the rth RCON value
        curr[0] ^= RCON_TABLE[round];

        // XOR with first 4 bytes of the previous section
        for (int i = 0; i < 4; i++, curr++)
            curr[0] ^= curr[-this->keySize];

        switch (this->keySize) {
            case AES128: {
                // STEP 2.

                for (int i = 0; i < 3 && curr != limit; i++) {
                    // take the 4th previous byte and XOR with the 16th previous byte
                    for (int j = 0; j < 4; j++, curr++)
                        curr[0] = curr[-4] ^ curr[-16];
                }
                break;
            }
            case AES192: {
                // STEP 2.

                for (int i = 0; i < 5 && curr != limit; i++) {
                    // take the 4th previous byte and XOR with the 24th previous byte
                    for (int j = 0; j < 4; j++, curr++)
                        curr[0] = curr[-4] ^ curr[-24];
                }
                break;
            }
            case AES256: {
                // STEP 2.

                for (int i = 0; i < 3 && curr != limit; i++) {
                    // take the 4th previous byte and XOR with the 32nd previous byte
                    for (int j = 0; j < 4; j++, curr++)
                        curr[0] = curr[-4] ^ curr[-32];
                }

                // STEP 3.
                
                // perform SBOX substitution of 4th previous byte and XOR with the 32nd previous byte
                for (int i = 0; i < 4 && curr != limit; i++, curr++)
                    curr[0] = SBOX_TABLE[curr[-4]] ^ curr[-32];
                    
                // STEP 4.

                for (int i = 0; i < 3 && curr != limit; i++) {
                    // take the 4th previous byte and XOR with the 32nd previous byte
                    for (int j = 0; j < 4; j++, curr++)
                        curr[0] = curr[-4] ^ curr[-32];
                }
                break;
            }
        }

        // increment the round
        round++;
    }
}

/**
 * performs a byte-wise XOR between bytes in param block and corresponding bytes in the expanded key [AES::ekey]
 *
 * operation described at: https://en.wikipedia.org/wiki/Advanced_Encryption_Standard
 *
 * @param block the block of data to operate on
 * @param round the current round of the AES algorithm that indicates which portion of the expanded key to use
 */
void AES::addRoundKey(uint8_t block[4][4], int round) const {
    for (int c = 0; c < 4; c++)
        for (int r = 0; r < 4; r++)
            block[r][c] ^= ekey[(round * 16) + (c * 4) + r];
}

/**
 * performs a byte-wise SBOX substitution on the bytes in param block
 *
 * operation described at: https://en.wikipedia.org/wiki/Advanced_Encryption_Standard
 *
 * @param block the block of data to operate on
 */
void AES::sboxSub(uint8_t block[4][4]) {
    for (int c = 0; c < 4; c++)
        for (int r = 0; r < 4; r++)
            block[r][c] = SBOX_TABLE[block[r][c]];
}

/**
 * performs an inverse byte-wise SBOX substitution on the bytes in param block
 *
 * @param block the block of data to operate on
 */
void AES::sboxSubInv(uint8_t block[4][4]) {
    for (int c = 0; c < 4; c++)
        for (int r = 0; r < 4; r++)
            block[r][c] = SBOX_INV_TABLE[block[r][c]];
}

/**
 * performs a byte-wise left row shift on the bytes in param block
 * the 0th row is left unchanged
 * the 1st row is shifted left 1 time
 * the 2nd row is shifted left 2 times
 * the 3rd row is shifted left 3 times
 *
 * operation described at: https://en.wikipedia.org/wiki/Advanced_Encryption_Standard
 *
 * @param block the block of data to operate on
 */
void AES::shiftRows(uint8_t block[4][4]) {
    for (int r = 1; r < 4; r++) {
        uint8_t temp[4] = { block[r][0], block[r][1], block[r][2], block[r][3] };
        for (int c = 0; c < 4; c++)
            block[r][c] = temp[(c + r) % 4];
    }
}

/**
 * performs a byte-wise right row shift on the bytes in param block
 * the 0th row is left unchanged
 * the 1st row is shifted right 1 time
 * the 2nd row is shifted right 2 times
 * the 3rd row is shifted right 3 times
 *
 * @param block the block of data to operate on
 */
void AES::shiftRowsInv(uint8_t block[4][4]) {
    for (int r = 1; r < 4; r++) {
        uint8_t temp[4] = { block[r][0], block[r][1], block[r][2], block[r][3] };
        for (int c = 0; c < 4; c++)
            block[r][c] = temp[(4 + c - r) % 4];
    }
}

/**
 * performs the mix column step of the AES algorithm on param block
 * 
 * operation described at: https://en.wikipedia.org/wiki/Advanced_Encryption_Standard
 * operation described at: https://www.samiam.org/mix-column.html
 *
 * @param block the block of data to operate on
 */
void AES::mixColumns(uint8_t block[4][4]) {
    for (int c = 0; c < 4; c++) {
        uint8_t temp[4] {
            static_cast<uint8_t>(multiplyGF(block[0][c], 2) ^ multiplyGF(block[1][c], 3) ^ multiplyGF(block[2][c], 1) ^ multiplyGF(block[3][c], 1)),
            static_cast<uint8_t>(multiplyGF(block[0][c], 1) ^ multiplyGF(block[1][c], 2) ^ multiplyGF(block[2][c], 3) ^ multiplyGF(block[3][c], 1)),
            static_cast<uint8_t>(multiplyGF(block[0][c], 1) ^ multiplyGF(block[1][c], 1) ^ multiplyGF(block[2][c], 2) ^ multiplyGF(block[3][c], 3)),
            static_cast<uint8_t>(multiplyGF(block[0][c], 3) ^ multiplyGF(block[1][c], 1) ^ multiplyGF(block[2][c], 1) ^ multiplyGF(block[3][c], 2))
        };

        block[0][c] = temp[0];
        block[1][c] = temp[1];
        block[2][c] = temp[2];
        block[3][c] = temp[3];
    }
}

/**
 * performs the inverse mix column step of the AES algorithm on param block
 *
 * operation described at: https://www.samiam.org/mix-column.html
 *
 * @param block the block of data to operate on
 */
void AES::mixColumnsInv(uint8_t block[4][4]) {
    for (int c = 0; c < 4; c++) {
        uint8_t temp[4] {
            static_cast<uint8_t>(multiplyGF(block[0][c], 14) ^ multiplyGF(block[1][c], 11) ^ multiplyGF(block[2][c], 13) ^ multiplyGF(block[3][c], 9)),
            static_cast<uint8_t>(multiplyGF(block[0][c], 9) ^ multiplyGF(block[1][c], 14) ^ multiplyGF(block[2][c], 11) ^ multiplyGF(block[3][c], 13)),
            static_cast<uint8_t>(multiplyGF(block[0][c], 13) ^ multiplyGF(block[1][c], 9) ^ multiplyGF(block[2][c], 14) ^ multiplyGF(block[3][c], 11)),
            static_cast<uint8_t>(multiplyGF(block[0][c], 11) ^ multiplyGF(block[1][c], 13) ^ multiplyGF(block[2][c], 9) ^ multiplyGF(block[3][c], 14))
        };

        block[0][c] = temp[0];
        block[1][c] = temp[1];
        block[2][c] = temp[2];
        block[3][c] = temp[3];
    }
}

/**
 * helper method for multiplying within a Galois Field
 *
 * operation described at: https://www.samiam.org/galois.html
 *
 * @param a operand for multiplication
 * @param b operand for multiplication
 *
 * @return a * b under a Galois Field
 */
uint8_t AES::multiplyGF(uint8_t a, uint8_t b) {
    if (a == 0 || b == 0)
        return 0;
    
    return EXP_TABLE[(LOG_TABLE[a] + LOG_TABLE[b]) % 255];
}